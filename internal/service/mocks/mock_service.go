// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	domain "ZenMobileService/internal/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMemoryCache is a mock of MemoryCache interface.
type MockMemoryCache struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryCacheMockRecorder
}

// MockMemoryCacheMockRecorder is the mock recorder for MockMemoryCache.
type MockMemoryCacheMockRecorder struct {
	mock *MockMemoryCache
}

// NewMockMemoryCache creates a new mock instance.
func NewMockMemoryCache(ctrl *gomock.Controller) *MockMemoryCache {
	mock := &MockMemoryCache{ctrl: ctrl}
	mock.recorder = &MockMemoryCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemoryCache) EXPECT() *MockMemoryCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMemoryCache) Get(ctx context.Context, key string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMemoryCacheMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMemoryCache)(nil).Get), ctx, key)
}

// IncrementBy mocks base method.
func (m *MockMemoryCache) IncrementBy(ctx context.Context, key string, incrementValue int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementBy", ctx, key, incrementValue)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementBy indicates an expected call of IncrementBy.
func (mr *MockMemoryCacheMockRecorder) IncrementBy(ctx, key, incrementValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementBy", reflect.TypeOf((*MockMemoryCache)(nil).IncrementBy), ctx, key, incrementValue)
}

// Set mocks base method.
func (m *MockMemoryCache) Set(ctx context.Context, key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockMemoryCacheMockRecorder) Set(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMemoryCache)(nil).Set), ctx, key, value)
}

// MockCacheServicer is a mock of CacheServicer interface.
type MockCacheServicer struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServicerMockRecorder
}

// MockCacheServicerMockRecorder is the mock recorder for MockCacheServicer.
type MockCacheServicerMockRecorder struct {
	mock *MockCacheServicer
}

// NewMockCacheServicer creates a new mock instance.
func NewMockCacheServicer(ctrl *gomock.Controller) *MockCacheServicer {
	mock := &MockCacheServicer{ctrl: ctrl}
	mock.recorder = &MockCacheServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheServicer) EXPECT() *MockCacheServicerMockRecorder {
	return m.recorder
}

// GetValueByKey mocks base method.
func (m *MockCacheServicer) GetValueByKey(ctx context.Context, key string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueByKey", ctx, key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValueByKey indicates an expected call of GetValueByKey.
func (mr *MockCacheServicerMockRecorder) GetValueByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueByKey", reflect.TypeOf((*MockCacheServicer)(nil).GetValueByKey), ctx, key)
}

// IncrementValueByKey mocks base method.
func (m *MockCacheServicer) IncrementValueByKey(ctx context.Context, key string, incrementValue int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementValueByKey", ctx, key, incrementValue)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementValueByKey indicates an expected call of IncrementValueByKey.
func (mr *MockCacheServicerMockRecorder) IncrementValueByKey(ctx, key, incrementValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementValueByKey", reflect.TypeOf((*MockCacheServicer)(nil).IncrementValueByKey), ctx, key, incrementValue)
}

// SetValueByKey mocks base method.
func (m *MockCacheServicer) SetValueByKey(ctx context.Context, key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValueByKey", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValueByKey indicates an expected call of SetValueByKey.
func (mr *MockCacheServicerMockRecorder) SetValueByKey(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValueByKey", reflect.TypeOf((*MockCacheServicer)(nil).SetValueByKey), ctx, key, value)
}

// MockSignatureServicer is a mock of SignatureServicer interface.
type MockSignatureServicer struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureServicerMockRecorder
}

// MockSignatureServicerMockRecorder is the mock recorder for MockSignatureServicer.
type MockSignatureServicerMockRecorder struct {
	mock *MockSignatureServicer
}

// NewMockSignatureServicer creates a new mock instance.
func NewMockSignatureServicer(ctrl *gomock.Controller) *MockSignatureServicer {
	mock := &MockSignatureServicer{ctrl: ctrl}
	mock.recorder = &MockSignatureServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatureServicer) EXPECT() *MockSignatureServicerMockRecorder {
	return m.recorder
}

// GenerateSignature mocks base method.
func (m *MockSignatureServicer) GenerateSignature(ctx context.Context, text, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSignature", ctx, text, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSignature indicates an expected call of GenerateSignature.
func (mr *MockSignatureServicerMockRecorder) GenerateSignature(ctx, text, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSignature", reflect.TypeOf((*MockSignatureServicer)(nil).GenerateSignature), ctx, text, key)
}

// ValidSignature mocks base method.
func (m *MockSignatureServicer) ValidSignature(ctx context.Context, signature, text, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidSignature", ctx, signature, text, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidSignature indicates an expected call of ValidSignature.
func (mr *MockSignatureServicerMockRecorder) ValidSignature(ctx, signature, text, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidSignature", reflect.TypeOf((*MockSignatureServicer)(nil).ValidSignature), ctx, signature, text, key)
}

// MockUsersServicer is a mock of UsersServicer interface.
type MockUsersServicer struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServicerMockRecorder
}

// MockUsersServicerMockRecorder is the mock recorder for MockUsersServicer.
type MockUsersServicerMockRecorder struct {
	mock *MockUsersServicer
}

// NewMockUsersServicer creates a new mock instance.
func NewMockUsersServicer(ctrl *gomock.Controller) *MockUsersServicer {
	mock := &MockUsersServicer{ctrl: ctrl}
	mock.recorder = &MockUsersServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersServicer) EXPECT() *MockUsersServicerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsersServicer) CreateUser(ctx context.Context, user domain.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersServicerMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersServicer)(nil).CreateUser), ctx, user)
}

// GetUser mocks base method.
func (m *MockUsersServicer) GetUser(ctx context.Context, userId int) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userId)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUsersServicerMockRecorder) GetUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsersServicer)(nil).GetUser), ctx, userId)
}
